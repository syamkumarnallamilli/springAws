// Content from .\src\main\java\com\example\awsec2api\AwsEc2ApiApplication.java
package com.example.awsec2api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;

@SpringBootApplication
@OpenAPIDefinition(info = @Info(title = "AWS EC2 API", version = "1.0", description = "API for managing AWS EC2 instances"))
public class AwsEc2ApiApplication {

    public static void main(String[] args) {
        SpringApplication.run(AwsEc2ApiApplication.class, args);
    }
}

// Content from .\src\main\java\com\example\awsec2api\config\AwsConfig.java
package com.example.awsec2api.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;

@Configuration
public class AwsConfig {

    @Value("${aws.accessKeyId}")
    private String awsAccessKeyId;

    @Value("${aws.secretKey}")
    private String awsSecretKey;

    @Value("${aws.region}")
    private String awsRegion;

    @Bean
    public Ec2Client ec2Client() {
        AwsBasicCredentials awsCredentials = AwsBasicCredentials.create(awsAccessKeyId, awsSecretKey);
        return Ec2Client.builder()
                .region(Region.of(awsRegion))
                .credentialsProvider(StaticCredentialsProvider.create(awsCredentials))
                .build();
    }
}

// Content from .\src\main\java\com\example\awsec2api\controller\EC2Controller.java
package com.example.awsec2api.controller;

import com.example.awsec2api.dto.VMCreationResponse;
import com.example.awsec2api.dto.VMListResponse;
import com.example.awsec2api.service.EC2Service;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/ec2")
@Tag(name = "EC2 Controller", description = "Endpoints for managing EC2 instances")
public class EC2Controller {

    private final EC2Service ec2Service;

    @Autowired
    public EC2Controller(EC2Service ec2Service) {
        this.ec2Service = ec2Service;
    }

    @PostMapping("/create")
    @Operation(summary = "Create a new EC2 instance", description = "Creates a new EC2 instance and returns its ID")
    public ResponseEntity<VMCreationResponse> createVM() {
        String instanceId = ec2Service.createVM();
        return ResponseEntity.ok(new VMCreationResponse(instanceId));
    }

    @GetMapping("/active")
    @Operation(summary = "List active EC2 instances", description = "Returns a list of all active EC2 instances")
    public ResponseEntity<VMListResponse> getActiveVMs() {
        VMListResponse activeVMs = ec2Service.getActiveVMs();
        return ResponseEntity.ok(activeVMs);
    }
}

// Content from .\src\main\java\com\example\awsec2api\dto\VMCreationResponse.java
package com.example.awsec2api.dto;

public class VMCreationResponse {
    private String instanceId;

    public VMCreationResponse(String instanceId) {
        this.instanceId = instanceId;
    }

    public String getInstanceId() {
        return instanceId;
    }

    public void setInstanceId(String instanceId) {
        this.instanceId = instanceId;
    }
}

// Content from .\src\main\java\com\example\awsec2api\dto\VMInfo.java
package com.example.awsec2api.dto;

public class VMInfo {
    private String instanceId;
    private String state;

    public VMInfo(String instanceId, String state) {
        this.instanceId = instanceId;
        this.state = state;
    }

    public String getInstanceId() {
        return instanceId;
    }

    public void setInstanceId(String instanceId) {
        this.instanceId = instanceId;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }
}

// Content from .\src\main\java\com\example\awsec2api\dto\VMListResponse.java
package com.example.awsec2api.dto;

import java.util.List;

public class VMListResponse {
    private List<VMInfo> instances;

    public VMListResponse(List<VMInfo> instances) {
        this.instances = instances;
    }

    public List<VMInfo> getInstances() {
        return instances;
    }

    public void setInstances(List<VMInfo> instances) {
        this.instances = instances;
    }
}

// Content from .\src\main\java\com\example\awsec2api\exception\EC2Exception.java
package com.example.awsec2api.exception;

public class EC2Exception extends RuntimeException {
    public EC2Exception(String message) {
        super(message);
    }

    public EC2Exception(String message, Throwable cause) {
        super(message, cause);
    }
}

// Content from .\src\main\java\com\example\awsec2api\exception\GlobalExceptionHandler.java
package com.example.awsec2api.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(EC2Exception.class)
    public ResponseEntity<ErrorResponse> handleEC2Exception(EC2Exception ex) {
        ErrorResponse error = new ErrorResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {
        ErrorResponse error = new ErrorResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), "An unexpected error occurred");
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    private static class ErrorResponse {
        private int status;
        private String message;

        public ErrorResponse(int status, String message) {
            this.status = status;
            this.message = message;
        }

        public int getStatus() {
            return status;
        }

        public String getMessage() {
            return message;
        }
    }
}

// Content from .\src\main\java\com\example\awsec2api\service\EC2Service.java
package com.example.awsec2api.service;

import com.example.awsec2api.dto.VMInfo;
import com.example.awsec2api.dto.VMListResponse;
import com.example.awsec2api.exception.EC2Exception;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.ec2.model.*;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class EC2Service {

    private static final Logger logger = LoggerFactory.getLogger(EC2Service.class);

    private final Ec2Client ec2Client;

    @Autowired
    public EC2Service(Ec2Client ec2Client) {
        this.ec2Client = ec2Client;
    }

    public String createVM() {
        try {
            RunInstancesRequest runRequest = RunInstancesRequest.builder()
                    .imageId("ami-0ebfd941bbafe70c6")
                    .instanceType(InstanceType.T2_MICRO)
                    .maxCount(1)
                    .minCount(1)
                    .build();

            RunInstancesResponse response = ec2Client.runInstances(runRequest);
            String instanceId = response.instances().get(0).instanceId();
            logger.info("Created new EC2 instance with ID: {}", instanceId);
            return instanceId;
        } catch (Ec2Exception e) {
            logger.error("Error creating EC2 instance: {}", e.getMessage());
            throw new EC2Exception("Failed to create EC2 instance", e);
        }
    }

    public VMListResponse getActiveVMs() {
        try {
            DescribeInstancesRequest request = DescribeInstancesRequest.builder().build();
            DescribeInstancesResponse response = ec2Client.describeInstances(request);

            List<VMInfo> activeInstances = response.reservations().stream()
                    .flatMap(reservation -> reservation.instances().stream())
                    .filter(instance -> instance.state().name() == InstanceStateName.RUNNING)
                    .map(instance -> new VMInfo(instance.instanceId(), instance.state().name().toString()))
                    .collect(Collectors.toList());

            logger.info("Retrieved {} active EC2 instances", activeInstances.size());
            return new VMListResponse(activeInstances);
        } catch (Ec2Exception e) {
            logger.error("Error retrieving active EC2 instances: {}", e.getMessage());
            throw new EC2Exception("Failed to retrieve active EC2 instances", e);
        }
    }
}

